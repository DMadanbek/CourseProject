/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package org.example;

import com.sun.tools.javac.Main;

import java.awt.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author smokc
 */
public class MainFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
        setTitle("JobApplicants db");
        ImageIcon imageIcon = new ImageIcon("d5b04cc3dcd8c17702549ebc5f1acf1a.jpg");
        setIconImage(imageIcon.getImage());
    }
    ArrayList<String> columnsList = new ArrayList<>(Arrays.asList("ID", "Name", "Surname", "Age", "Accepted"));


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        delRowBttn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        importFileBttn = new javax.swing.JButton();
        exportFileBttn = new javax.swing.JButton();
        deleteColumnBttn = new javax.swing.JButton();
        addColumnBttn = new javax.swing.JButton();
        addRowBttn = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        delRowBttn.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        delRowBttn.setText("Delete row");
        delRowBttn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delRowBttnActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
                new Object [][] {
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null}
                },
                columnsList.toArray())
        {
            Class[] types = new Class[]{java.lang.Object.class,java.lang.Object.class,java.lang.Object.class,java.lang.Object.class,java.lang.Boolean.class};
            public Class getColumnClass(int columnIndex){
                return types[columnIndex];
            }
        });


        jTable1.setCellSelectionEnabled(true);
        jTable1.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTable1);
        jTable1.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setResizable(false);
            jTable1.getColumnModel().getColumn(1).setResizable(false);
            jTable1.getColumnModel().getColumn(2).setResizable(false);
            jTable1.getColumnModel().getColumn(3).setResizable(false);
            jTable1.getColumnModel().getColumn(4).setResizable(false);
        }

        importFileBttn.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        importFileBttn.setText("Import File");
        importFileBttn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importFileBttnActionPerformed(evt);
            }
        });

        exportFileBttn.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        exportFileBttn.setText("Export File");
        exportFileBttn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportFileBttnActionPerformed(evt);
            }
        });

        deleteColumnBttn.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        deleteColumnBttn.setText("Delete Column");
        deleteColumnBttn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteColumnBttnActionPerformed(evt);
            }
        });

        addColumnBttn.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        addColumnBttn.setText("AddColumn");
        addColumnBttn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addColumnBttnActionPerformed(evt);
            }
        });

        addRowBttn.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        addRowBttn.setText("AddRow");
        addRowBttn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addRowBttnActionPerformed(evt);
            }
        });
        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(exportFileBttn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(deleteColumnBttn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(importFileBttn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(delRowBttn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(addColumnBttn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(addRowBttn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addContainerGap(18, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(31, 31, 31)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 305, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(deleteColumnBttn)
                                                .addGap(18, 18, 18)
                                                .addComponent(exportFileBttn)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(importFileBttn)
                                                .addGap(18, 18, 18)
                                                .addComponent(delRowBttn)
                                                .addGap(18, 18, 18)
                                                .addComponent(addColumnBttn)
                                                .addGap(18, 18, 18)
                                                .addComponent(addRowBttn)))
                                .addGap(0, 90, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>
    //DeleteButton
    private void delRowBttnActionPerformed(java.awt.event.ActionEvent evt) {
        DefaultTableModel tblModel = (DefaultTableModel) jTable1.getModel();

        //1 row delete
        if(jTable1.getSelectedRowCount()==1){
            tblModel.removeRow(jTable1.getSelectedRow());
        }else{
            if(jTable1.getSelectedRowCount()==0){
                JOptionPane.showMessageDialog(this,"Table is empty");
                //if user didnt choose row
            }
            else{
                //deleting several rows
                int[] n = jTable1.getSelectedRows();
                int lim = n.length;

                for(int i=lim-1; i>=0; i--){
                    tblModel.removeRow(n[i]);
                }
            }

        }

    }

    private void importFileBttnActionPerformed(java.awt.event.ActionEvent evt) {
            DefaultTableModel tblModel = (DefaultTableModel) jTable1.getModel();
            String path = JOptionPane.showInputDialog("Put absolute path to your file:");
            File file = new File(path);

            try (Scanner scanner = new Scanner(file)) {

                if (scanner.hasNextLine()) {
                    String headerLine = scanner.nextLine();
                    String[] columns = headerLine.split(",");

                    tblModel.setColumnCount(0);
                    for (String col : columns) {
                        tblModel.addColumn(col.trim());
                    }
                }

                tblModel.setRowCount(0);

                while (scanner.hasNextLine()) {
                    String line = scanner.nextLine();
                    String[] values = line.split(",");
                    Object[] rowData = new Object[values.length];

                    for (int i = 0; i < values.length; i++) {
                        String value = values[i].trim();
                        if (value.equalsIgnoreCase("true") || value.equalsIgnoreCase("false")) {
                            rowData[i] = Boolean.parseBoolean(value);
                        } else {
                            rowData[i] = value;
                        }
                    }

                    tblModel.addRow(rowData);
                }

                JOptionPane.showMessageDialog(this, "CSV файл успешно загружен!");

            } catch (FileNotFoundException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, "Файл не найден!", "Ошибка", JOptionPane.ERROR_MESSAGE);
            }
        }



    private void deleteColumnBttnActionPerformed(java.awt.event.ActionEvent evt) {
        TableColumnModel columnModel = jTable1.getColumnModel();
        DefaultTableModel tblModel = (DefaultTableModel) jTable1.getModel();

        if(jTable1.getSelectedColumnCount() == 1) {
            int delCol = jTable1.getSelectedColumn();
            columnModel.removeColumn(columnModel.getColumn(delCol));

        } else {
            if(jTable1.getSelectedColumnCount() == 0) {
                JOptionPane.showMessageDialog(this,"No column selected");
            } else {
                int[] n = jTable1.getSelectedColumns();
                System.out.println(n.length);

                // Удаляем колонки с конца, чтобы индексы не изменялись после удаления
                for(int i = n.length - 1; i >= 0; i--) {
                    columnModel.removeColumn(columnModel.getColumn(n[i]));
                }
            }
        }
    }

    private void addColumnBttnActionPerformed(java.awt.event.ActionEvent evt) {
        JTextField columnText = new JTextField();
        int result = JOptionPane.showConfirmDialog(null, columnText, "Write Column name:", JOptionPane.OK_CANCEL_OPTION);

        if(result == JOptionPane.OK_OPTION) {
            String name = columnText.getText().trim();

            if(name.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Column name cannot be empty!");
                return;
            }

            columnsList.add(name);

            DefaultTableModel oldModel = (DefaultTableModel) jTable1.getModel();
            Vector data = oldModel.getDataVector();

            // добавить null в каждую строку
            for (Object rowObj : data) {
                Vector row = (Vector) rowObj;
                row.add(null);
            }

            DefaultTableModel newModel = new DefaultTableModel(columnsList.toArray(), 0) {
                @Override
                public Class getColumnClass(int columnIndex) {
                    return Object.class;
                }
            };

            for (Object rowObj : data) {
                Vector row = (Vector) rowObj;
                newModel.addRow(row.toArray());
            }

            jTable1.setModel(newModel);
        } else {
            JOptionPane.showMessageDialog(this, "Canceled");
        }
    }


    private void addRowBttnActionPerformed(java.awt.event.ActionEvent evt) {
        DefaultTableModel tblModel = (DefaultTableModel) jTable1.getModel();
        Vector<String> vector = new Vector<>();
        tblModel.addRow(vector);

    }

    private void exportFileBttnActionPerformed(java.awt.event.ActionEvent evt) {
        DefaultTableModel tblModel = (DefaultTableModel) jTable1.getModel();
        File file = new File("SaveExample.csv");
        try {
            PrintWriter pw = new PrintWriter(file);
            for(int col=0; col<tblModel.getColumnCount();col++){
                pw.write(tblModel.getColumnName(col));
                if(col<tblModel.getColumnCount()-1)pw.print(",");
            }
            pw.println();
            for(int row=0; row<tblModel.getRowCount();row++){
                for(int col=0; col<tblModel.getColumnCount();col++) {
                    if(tblModel.getValueAt(row, col)!=null) {
                        Object value = tblModel.getValueAt(row,col);
                        if(value instanceof Boolean ){
                            pw.print((Boolean) value ? "true":"false");
                        }
                        else if (col<tblModel.getColumnCount()-1) {
                            pw.print(String.valueOf( value)+",");
                        }
                        else{
                            pw.print(String.valueOf( value));
                        }
                    }
                }
                pw.println();
            }
        pw.close();
        JOptionPane.showMessageDialog(this,"Data saved successfully");

        } catch (FileNotFoundException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify
    private javax.swing.JButton addColumnBttn;
    private javax.swing.JButton addRowBttn;
    private javax.swing.JButton delRowBttn;
    private javax.swing.JButton deleteColumnBttn;
    private javax.swing.JButton exportFileBttn;
    private javax.swing.JButton importFileBttn;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration
}
